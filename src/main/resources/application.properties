# datasource 
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:templateproposta
spring.datasource.username=sa
spring.datasource.password=

server.port=${APP_PORT:8081}

# jpa 
spring.jpa.database-palataform=org.hibernate.dialect.H2Dialect

# h2
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


# HttpClients
servico.analise.solicitante=${PROPOSTA_ANALISE_SOLICITANTE:http://localhost:9999}
servico.recursos.cartoes=${SERVICO_RECURSOS_CARTOES:http://localhost:8888}

# tempo para executar
tempo.scheduled.vincular=${TEMPO_SCHEDULED_VINCULAR.CARTOES:9000}

management.endpoints.enabled-by-default=false
management.endpoint.info.enabled=true
management.endpoint.health.enabled=true
management.endpoint.prometheus.enabled=true
management.endpoints.web.exposure.include=health,info,prometheus

# Jaeger
# Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
# Nome do serviço
opentracing.jaeger.service-name=template-proposta
# Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
# Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://keycloak:8080/auth/realms/template-proposta}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://keycloak:8080/auth/realms/template-proposta/protocol/openid-connect/certs}



# health liveness and readiness
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
